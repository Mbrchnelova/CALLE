import math
import sys


#PART 1: READ

mhdfilein_name = str((sys.argv)[1])
mhdfileout_name = str((sys.argv)[2])


hs_radyn = [1.0308e+09,1.02538e+09,1.01996e+09,1.01453e+09,1.00911e+09,1.00369e+09,9.98267e+08,9.92845e+08,9.87423e+08,9.82e+08,9.76578e+08,9.71156e+08,9.65734e+08,9.60312e+08,9.54889e+08,9.49467e+08,9.44045e+08,9.38623e+08,9.33201e+08,9.27779e+08,9.22357e+08,9.16935e+08,9.11513e+08,9.06091e+08,9.00669e+08,8.95247e+08,8.89825e+08,8.84403e+08,8.78981e+08,8.73559e+08,8.68137e+08,8.62715e+08,8.57294e+08,8.51872e+08,8.4645e+08,8.41029e+08,8.35607e+08,8.30185e+08,8.24764e+08,8.19342e+08,8.13921e+08,8.08499e+08,8.03078e+08,7.97656e+08,7.92235e+08,7.86814e+08,7.81392e+08,7.75971e+08,7.7055e+08,7.65129e+08,7.59708e+08,7.54287e+08,7.48865e+08,7.43445e+08,7.38024e+08,7.32603e+08,7.27182e+08,7.21761e+08,7.1634e+08,7.1092e+08,7.05499e+08,7.00079e+08,6.94658e+08,6.89238e+08,6.83817e+08,6.78397e+08,6.72977e+08,6.67557e+08,6.62137e+08,6.56717e+08,6.51297e+08,6.45877e+08,6.40457e+08,6.35037e+08,6.29618e+08,6.24198e+08,6.18779e+08,6.1336e+08,6.0794e+08,6.02521e+08,5.97102e+08,5.91684e+08,5.86265e+08,5.80846e+08,5.75428e+08,5.70009e+08,5.64591e+08,5.59173e+08,5.53755e+08,5.48337e+08,5.4292e+08,5.37502e+08,5.32085e+08,5.26668e+08,5.21251e+08,5.15835e+08,5.10418e+08,5.05002e+08,4.99586e+08,4.9417e+08,4.88755e+08,4.83339e+08,4.77924e+08,4.7251e+08,4.67095e+08,4.61681e+08,4.56268e+08,4.50854e+08,4.45441e+08,4.40029e+08,4.34617e+08,4.29205e+08,4.23794e+08,4.18383e+08,4.12973e+08,4.07564e+08,4.02155e+08,3.96747e+08,3.91339e+08,3.85933e+08,3.80527e+08,3.75122e+08,3.69718e+08,3.64315e+08,3.58913e+08,3.53512e+08,3.48113e+08,3.42715e+08,3.37318e+08,3.31923e+08,3.26531e+08,3.2114e+08,3.15752e+08,3.10366e+08,3.04983e+08,2.99603e+08,2.94227e+08,2.88856e+08,2.83489e+08,2.78127e+08,2.72772e+08,2.67425e+08,2.62087e+08,2.56759e+08,2.51444e+08,2.46145e+08,2.40866e+08,2.35611e+08,2.30386e+08,2.25199e+08,2.20061e+08,2.14984e+08,2.09986e+08,2.05087e+08,2.00314e+08,1.95699e+08,1.91276e+08,1.87084e+08,1.83163e+08,1.79548e+08,1.76266e+08,1.73334e+08,1.70754e+08,1.68518e+08,1.66605e+08,1.64985e+08,1.63627e+08,1.62496e+08,1.61559e+08,1.60785e+08,1.60147e+08,1.5962e+08,1.59185e+08,1.58825e+08,1.58526e+08,1.58277e+08,1.5807e+08,1.57897e+08,1.57752e+08,1.57631e+08,1.5753e+08,1.57446e+08,1.57376e+08,1.57318e+08,1.5727e+08,1.5723e+08,1.57197e+08,1.57169e+08,1.57145e+08,1.57124e+08,1.57106e+08,1.57088e+08,1.57071e+08,1.57053e+08,1.57031e+08,1.57005e+08,1.56969e+08,1.56917e+08,1.56841e+08,1.56729e+08,1.56565e+08,1.56328e+08,1.55988e+08,1.55508e+08,1.54843e+08,1.53947e+08,1.52778e+08,1.51317e+08,1.49574e+08,1.47591e+08,1.45437e+08,1.43183e+08,1.40894e+08,1.38614e+08,1.36373e+08,1.34181e+08,1.32035e+08,1.29928e+08,1.27853e+08,1.25808e+08,1.23791e+08,1.21799e+08,1.19829e+08,1.17877e+08,1.15942e+08,1.1402e+08,1.1211e+08,1.10209e+08,1.08317e+08,1.06431e+08,1.04551e+08,1.02674e+08,1.00801e+08,9.89309e+07,9.70625e+07,9.51956e+07,9.33296e+07,9.14642e+07,8.9599e+07,8.77336e+07,8.58679e+07,8.40016e+07,8.21347e+07,8.0267e+07,7.83988e+07,7.65305e+07,7.46625e+07,7.27958e+07,7.09314e+07,6.90706e+07,6.72144e+07,6.53631e+07,6.35168e+07,6.16749e+07,5.98361e+07,5.79991e+07,5.61625e+07,5.43248e+07,5.24853e+07,5.06433e+07,4.87985e+07,4.69508e+07,4.51001e+07,4.32465e+07,4.139e+07,3.95307e+07,3.76686e+07,3.58037e+07,3.39361e+07,3.20658e+07,3.01926e+07,2.83167e+07,2.64379e+07,2.45563e+07,2.2672e+07,2.07852e+07,1.88964e+07,1.70062e+07,1.5116e+07,1.32279e+07,1.13458e+07,9.47584e+06,7.6274e+06,5.81433e+06,4.05534e+06,2.37349e+06,794137.0,-658772.0,-1.96699e+06,-3.12218e+06,-4.12684e+06,-4.99155e+06,-5.73071e+06,-6.3598e+06,-6.894e+06,-7.34705e+06,-7.73083e+06,-8.05557e+06,-8.33006e+06,-8.5618e+06]


ds_radyn = [1.31045e-15,1.3139e-15,1.31805e-15,1.32223e-15,1.32644e-15,1.3307e-15,1.33498e-15,1.3393e-15,1.34365e-15,1.34805e-15,1.35247e-15,1.35694e-15,1.36144e-15,1.36598e-15,1.37056e-15,1.37518e-15,1.37984e-15,1.38454e-15,1.38928e-15,1.39407e-15,1.39889e-15,1.40377e-15,1.40868e-15,1.41364e-15,1.41865e-15,1.4237e-15,1.4288e-15,1.43395e-15,1.43914e-15,1.44439e-15,1.44969e-15,1.45503e-15,1.46044e-15,1.46589e-15,1.4714e-15,1.47696e-15,1.48258e-15,1.48826e-15,1.49399e-15,1.49979e-15,1.50564e-15,1.51156e-15,1.51754e-15,1.52358e-15,1.52969e-15,1.53587e-15,1.54211e-15,1.54843e-15,1.55481e-15,1.56126e-15,1.56779e-15,1.5744e-15,1.58108e-15,1.58784e-15,1.59468e-15,1.6016e-15,1.6086e-15,1.61569e-15,1.62286e-15,1.63013e-15,1.63748e-15,1.64493e-15,1.65248e-15,1.66012e-15,1.66786e-15,1.67571e-15,1.68365e-15,1.69171e-15,1.69987e-15,1.70815e-15,1.71655e-15,1.72506e-15,1.73369e-15,1.74244e-15,1.75133e-15,1.76034e-15,1.76949e-15,1.77878e-15,1.78821e-15,1.79778e-15,1.80751e-15,1.81739e-15,1.82742e-15,1.83762e-15,1.84799e-15,1.85853e-15,1.86925e-15,1.88015e-15,1.89124e-15,1.90253e-15,1.91402e-15,1.92571e-15,1.93762e-15,1.94975e-15,1.96211e-15,1.97471e-15,1.98756e-15,2.00065e-15,2.01401e-15,2.02764e-15,2.04156e-15,2.05577e-15,2.07028e-15,2.08511e-15,2.10027e-15,2.11577e-15,2.13163e-15,2.14786e-15,2.16447e-15,2.18149e-15,2.19893e-15,2.21682e-15,2.23516e-15,2.25398e-15,2.27331e-15,2.29317e-15,2.31359e-15,2.33459e-15,2.3562e-15,2.37847e-15,2.40142e-15,2.42509e-15,2.44952e-15,2.47476e-15,2.50086e-15,2.52787e-15,2.55585e-15,2.58486e-15,2.61497e-15,2.64626e-15,2.67881e-15,2.71271e-15,2.74808e-15,2.78501e-15,2.82365e-15,2.86413e-15,2.90662e-15,2.95129e-15,2.99836e-15,3.04805e-15,3.10064e-15,3.15644e-15,3.21579e-15,3.27911e-15,3.34689e-15,3.41968e-15,3.49816e-15,3.58312e-15,3.67549e-15,3.77643e-15,3.8873e-15,4.00977e-15,4.14585e-15,4.29803e-15,4.46927e-15,4.66314e-15,4.88386e-15,5.13629e-15,5.42578e-15,5.75786e-15,6.13775e-15,6.57007e-15,7.05882e-15,7.60794e-15,8.22166e-15,8.90451e-15,9.66155e-15,1.04987e-14,1.14233e-14,1.24454e-14,1.3578e-14,1.48357e-14,1.6231e-14,1.77746e-14,1.94792e-14,2.13609e-14,2.34344e-14,2.57089e-14,2.81884e-14,3.08801e-14,3.38022e-14,3.69831e-14,4.04612e-14,4.42891e-14,4.8542e-14,5.33316e-14,5.88291e-14,6.53059e-14,7.32092e-14,8.33024e-14,9.6862e-14,1.15722e-13,1.41811e-13,1.76614e-13,2.19212e-13,2.61375e-13,2.90254e-13,3.0233e-13,3.05218e-13,3.0651e-13,3.08324e-13,3.11172e-13,3.15647e-13,3.22587e-13,3.33065e-13,3.48636e-13,3.71755e-13,4.05248e-13,4.53e-13,5.19484e-13,6.09432e-13,7.2731e-13,8.77402e-13,1.06561e-12,1.30243e-12,1.60198e-12,1.97497e-12,2.42928e-12,2.98006e-12,3.65081e-12,4.46852e-12,5.46122e-12,6.6589e-12,8.09558e-12,9.81159e-12,1.18562e-11,1.42905e-11,1.71894e-11,2.06441e-11,2.4765e-11,2.96835e-11,3.55568e-11,4.25714e-11,5.09495e-11,6.09554e-11,7.2904e-11,8.717e-11,1.042e-10,1.24524e-10,1.48776e-10,1.77707e-10,2.12212e-10,2.5335e-10,3.02379e-10,3.60792e-10,4.30341e-10,5.13087e-10,6.11426e-10,7.28126e-10,8.66373e-10,1.02984e-09,1.22281e-09,1.4503e-09,1.71828e-09,2.03391e-09,2.4058e-09,2.84436e-09,3.36209e-09,3.9739e-09,4.69749e-09,5.55381e-09,6.56762e-09,7.76824e-09,9.19033e-09,1.08749e-08,1.28702e-08,1.52334e-08,1.80314e-08,2.13424e-08,2.52579e-08,2.98835e-08,3.53405e-08,4.17669e-08,4.93173e-08,5.81624e-08,6.84866e-08,8.04839e-08,9.43505e-08,1.10273e-07,1.28407e-07,1.48848e-07,1.71598e-07,1.96525e-07,2.23327e-07,2.51496e-07,2.80269e-07,3.0864e-07,3.35423e-07,3.59403e-07,3.79521e-07,3.95088e-07,4.05884e-07,4.12073e-07,4.1404e-07,4.12272e-07,4.07292e-07,3.99575e-07,3.89495e-07,3.77297e-07,3.63047e-07]


ts_radyn = [1.0e+06,997950.0,995883.0,993807.0,991722.0,989628.0,987525.0,985413.0,983291.0,981160.0,979019.0,976868.0,974708.0,972538.0,970357.0,968167.0,965966.0,963755.0,961534.0,959302.0,957059.0,954805.0,952540.0,950264.0,947977.0,945679.0,943369.0,941047.0,938714.0,936368.0,934011.0,931641.0,929259.0,926864.0,924456.0,922036.0,919603.0,917156.0,914696.0,912222.0,909735.0,907234.0,904718.0,902188.0,899644.0,897085.0,894511.0,891922.0,889317.0,886697.0,884061.0,881409.0,878740.0,876055.0,873353.0,870635.0,867898.0,865145.0,862373.0,859583.0,856775.0,853948.0,851102.0,848236.0,845351.0,842446.0,839521.0,836574.0,833607.0,830618.0,827608.0,824575.0,821520.0,818441.0,815340.0,812214.0,809064.0,805889.0,802689.0,799463.0,796210.0,792931.0,789624.0,786290.0,782927.0,779535.0,776113.0,772660.0,769177.0,765661.0,762113.0,758532.0,754917.0,751267.0,747581.0,743858.0,740098.0,736300.0,732462.0,728584.0,724664.0,720701.0,716695.0,712644.0,708546.0,704401.0,700207.0,695962.0,691665.0,687314.0,682909.0,678446.0,673924.0,669341.0,664695.0,659984.0,655205.0,650356.0,645434.0,640437.0,635362.0,630205.0,624964.0,619634.0,614211.0,608693.0,603074.0,597349.0,591515.0,585564.0,579492.0,573292.0,566957.0,560480.0,553852.0,547064.0,540108.0,532971.0,525643.0,518110.0,510359.0,502372.0,494133.0,485621.0,476815.0,467691.0,458220.0,448373.0,438115.0,427410.0,416215.0,404487.0,392179.0,379246.0,365644.0,351342.0,336329.0,320623.0,304290.0,287458.0,270321.0,253123.0,236119.0,219532.0,203537.0,188263.0,173795.0,160175.0,147411.0,135476.0,124325.0,113920.0,104257.0,95335.5,87134.3,79611.5,72728.2,66457.1,60769.6,55620.1,50946.2,46684.6,42778.5,39177.1,35832.7,32699.1,29731.2,26885.4,24122.7,21419.1,18788.3,16311.6,14122.4,12304.7,10884.4,9890.64,9323.98,9093.89,9029.1,8994.31,8944.96,8882.24,8805.34,8712.6,8604.0,8479.38,8330.75,8161.27,7968.92,7755.15,7521.93,7271.51,7005.95,6721.87,6409.48,6075.3,5757.33,5487.96,5266.01,5078.39,4917.78,4782.72,4673.04,4587.42,4523.11,4476.4,4443.26,4420.01,4403.64,4391.91,4383.31,4376.89,4372.1,4368.61,4366.24,4364.87,4364.43,4364.86,4366.13,4368.2,4371.04,4374.6,4378.86,4383.81,4389.36,4395.51,4402.28,4409.7,4417.9,4427.02,4437.15,4448.3,4460.36,4473.1,4486.2,4499.26,4511.85,4523.61,4534.29,4543.78,4552.11,4559.37,4565.71,4571.29,4576.32,4581.0,4585.56,4590.29,4595.5,4601.57,4608.93,4618.1,4629.7,4644.43,4663.12,4686.68,4716.11,4752.51,4797.08,4851.21,4916.46,4994.41,5086.25,5192.46,5312.79,5446.57,5593.1,5751.84,5922.92,6107.36,6306.58,6521.71,6753.51,7003.03,7271.52,7560.25,7870.7,8205.0,8566.24,8959.3]

nopoints = len(ts_radyn)
#PART 2: CONVERT

for i in range(0, nopoints):
	#cm to m
	hs_radyn[i] = hs_radyn[i]/100.0
	#g/cm3 to kg/m3
	ds_radyn[i] = ds_radyn[i]*1000.0


#PART 3: INTERPOLATE ON A NEW GRID

MHDinfile = open(mhdfilein_name ,"r")
MHDoutfile = open(mhdfileout_name, "w")


MHDlines = MHDinfile.readlines()



l = 1

lref = 1.0




#Lines below just determine the structure of the CFmesh file
getEND = False
doNOT = False

string_nodes = "!LIST_NODE"
string_data = "!LIST_STATE 1"
string_connect = "!LIST_ELEM"


idx1 = -1
idx2 = -1
idx0 = -1
i = 1

for MHDline in MHDlines:
        if MHDline[0:len(string_nodes)] == string_nodes:
                idx1 = i
        if MHDline[0:len(string_data)] == string_data:
                idx2 = i
        if MHDline[0:len(string_connect)] == string_connect:
                idx0 = i
        i = i + 1


cell_centers = []
connectivity = []
coordinates = []

nbelements = -1


#Here, insert a procedure to import your flux rope B field data
#This data could have a structure of [[x1, y1, z1, Bx1, By1, Bz1], [x2, y2, z2, Bx2, By2, Bz2], ...] 
LOUIS_DATA = []
n_LOUIS_DATA = len(LOUIS_DATA)

for MHDline in MHDlines:

	if l == 7:
                line = MHDline.split(" ")

		nbelements = int(line[1]) 
		MHDoutline = MHDline

	if getEND and MHDline[0] == "!":
		doNOT = True
		getEND = False
	if l > idx2 and MHDline[0] != "!" and MHDline[0] != "N" and len(MHDline) > 1 and doNOT == False:
		getEND = True
		vals = MHDline.split(" ")


		#We read the current cell state values
                Bx = float(vals[0])
                By = float(vals[1])
                Bz = float(vals[2])
                Ex = float(vals[3])
                Ey = float(vals[4])
                Ez = float(vals[5])
                psi = float(vals[6])
                phi = float(vals[7])
                rho0 = float(vals[8])
		rho1 = float(vals[9])
		Vx0 = float(vals[10])
		Vy0 = float(vals[11])
		Vx1 = float(vals[12])
		Vy1 = float(vals[13])
		T0 = float(vals[14])
		T1 = float(vals[15])

		cell_center = cell_centers[j]

                x = cell_center[0]
                y = cell_center[1]

		current_ionisation_fraction = rho0/rho1

		new_d = 0.0
		new_t = 0.0
		weights = 0.0

		n_mindist = -1
		mindist = 1e100
		for n in range(0, nopoints):
                        y_radyn = hs_radyn[n]  
                        d_radyn = ds_radyn[n]
                        t_radyn = ts_radyn[n] 

			distance = abs(y_radyn-y)
			if (distance == 0.0):
				distance = 1e-17

			weight = 1.0/distance
	
			new_t = new_t + t_radyn*weight
                        new_d = new_d + d_radyn*weight

			weights = weights + weight


			if distance < mindist:
				mindist = distance
				n_mindist = n

		if (weights != 0.0):
			new_t = new_t/weights
                        new_d = new_d/weights

		new_t = ts_radyn[n_mindist]
		new_d = ds_radyn[n_mindist]

		T0 = new_t
		T1 = new_t
		rho0 = new_d
		rho1 = new_d * rho0/current_ionisation_fraction

		#The final values we write into the output file
		MHDoutline = str(Bx) + " " + str(By) + " " + str(Bz) + " " + str(Ex) + " " + str(Ey) + " " + str(Ez) + " " + str(psi) + " " + str(phi) + " " + str(rho0) + " " + str(rho1) + " " + str(Vx0) + " " + str(Vy0) + " " + str(Vx1) + " " + str(Vy1) + " " + str(T0) + " " + str(T1) + "\n" 

		j = j + 1

	elif l > idx1 and l < idx2: 
		vals = MHDline.split(" ")

		#We read the node coordinaes
		x = float(vals[0])
		y = float(vals[1])

		#We manipulate the node coordinates if need be
		xMF = x * lref
		yMF = y * lref

		coordinates.append([x, y])

		#And the final node coordinates are written into the output file
		MHDoutline = str(xMF) + " " +  str(yMF) + "\n"

	elif l == idx2:
		for i in range(0, len(connectivity)):
			n1 = connectivity[i][0]
                        n2 = connectivity[i][1]
                        n3 = connectivity[i][2]
                        n4 = connectivity[i][3]

			cell_center_x = 1./4. * (coordinates[n1][0] + coordinates[n2][0] + coordinates[n3][0] + coordinates[n4][0])
                        cell_center_y = 1./4. * (coordinates[n1][1] + coordinates[n2][1] + coordinates[n3][1] + coordinates[n4][1])

			cell_centers.append([cell_center_x, cell_center_y])

		j = 0

		MHDoutline = MHDline

	elif l > idx0 and l <= idx0 + nbelements:
                vals = MHDline.split(" ")

		n1 = int(vals[0])
                n2 = int(vals[1])
                n3 = int(vals[2])
                n4 = int(vals[3])
                n5 = int(vals[4])

		connectivity.append([n1, n2, n3, n4])
		MHDoutline = MHDline
	else:
		MHDoutline = MHDline

	MHDoutfile.write(MHDoutline)

	l = l + 1

MHDinfile.close()
MHDoutfile.close()







for i in range(1, nopoints+1):

        print hs_radyn[-i]



for i in range(0, len(cell_centers)):
        if i%150 == 0:
                print cell_centers[i][1]




